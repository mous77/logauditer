// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

/*
	Package api is a generated protocol buffer package.

	It is generated from these files:
		api.proto

	It has these top-level messages:
		ExecuteRequest
		ExecuteCommandResponse
*/
package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import logauditer_raw "logauditer/raw"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// CommandExecutionReply describes all available replies.
type CommandExecutionReply int32

const (
	NilCommandReply    CommandExecutionReply = 0
	OkCommandReply     CommandExecutionReply = 1
	StringCommandReply CommandExecutionReply = 2
	SliceCommandReply  CommandExecutionReply = 3
	ErrCommandReply    CommandExecutionReply = 4
)

var CommandExecutionReply_name = map[int32]string{
	0: "NIL",
	1: "OK",
	2: "STRING",
	3: "SLICE",
	4: "ERR",
}
var CommandExecutionReply_value = map[string]int32{
	"NIL":    0,
	"OK":     1,
	"STRING": 2,
	"SLICE":  3,
	"ERR":    4,
}

func (x CommandExecutionReply) String() string {
	return proto.EnumName(CommandExecutionReply_name, int32(x))
}
func (CommandExecutionReply) EnumDescriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

type ExecuteRequest struct {
	Command logauditer_raw.Raw `protobuf:"bytes,1,opt,name=command,proto3,customtype=logauditer/raw.Raw" json:"command"`
}

func (m *ExecuteRequest) Reset()                    { *m = ExecuteRequest{} }
func (m *ExecuteRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteRequest) ProtoMessage()               {}
func (*ExecuteRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

type ExecuteCommandResponse struct {
	Reply CommandExecutionReply `protobuf:"varint,1,opt,name=reply,proto3,enum=api.CommandExecutionReply" json:"reply,omitempty"`
	Item  string                `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	Items []string              `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

func (m *ExecuteCommandResponse) Reset()                    { *m = ExecuteCommandResponse{} }
func (m *ExecuteCommandResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteCommandResponse) ProtoMessage()               {}
func (*ExecuteCommandResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func (m *ExecuteCommandResponse) GetReply() CommandExecutionReply {
	if m != nil {
		return m.Reply
	}
	return NilCommandReply
}

func (m *ExecuteCommandResponse) GetItem() string {
	if m != nil {
		return m.Item
	}
	return ""
}

func (m *ExecuteCommandResponse) GetItems() []string {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*ExecuteRequest)(nil), "api.ExecuteRequest")
	proto.RegisterType((*ExecuteCommandResponse)(nil), "api.ExecuteCommandResponse")
	proto.RegisterEnum("api.CommandExecutionReply", CommandExecutionReply_name, CommandExecutionReply_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LogAuditer service

type LogAuditerClient interface {
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteCommandResponse, error)
}

type logAuditerClient struct {
	cc *grpc.ClientConn
}

func NewLogAuditerClient(cc *grpc.ClientConn) LogAuditerClient {
	return &logAuditerClient{cc}
}

func (c *logAuditerClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteCommandResponse, error) {
	out := new(ExecuteCommandResponse)
	err := grpc.Invoke(ctx, "/api.LogAuditer/Execute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LogAuditer service

type LogAuditerServer interface {
	Execute(context.Context, *ExecuteRequest) (*ExecuteCommandResponse, error)
}

func RegisterLogAuditerServer(s *grpc.Server, srv LogAuditerServer) {
	s.RegisterService(&_LogAuditer_serviceDesc, srv)
}

func _LogAuditer_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogAuditerServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.LogAuditer/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogAuditerServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogAuditer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.LogAuditer",
	HandlerType: (*LogAuditerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _LogAuditer_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *ExecuteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApi(dAtA, i, uint64(m.Command.Size()))
	n1, err := m.Command.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *ExecuteCommandResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteCommandResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reply != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Reply))
	}
	if len(m.Item) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Item)))
		i += copy(dAtA[i:], m.Item)
	}
	if len(m.Items) > 0 {
		for _, s := range m.Items {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeFixed64Api(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Api(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ExecuteRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Command.Size()
	n += 1 + l + sovApi(uint64(l))
	return n
}

func (m *ExecuteCommandResponse) Size() (n int) {
	var l int
	_ = l
	if m.Reply != 0 {
		n += 1 + sovApi(uint64(m.Reply))
	}
	l = len(m.Item)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, s := range m.Items {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExecuteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteCommandResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteCommandResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteCommandResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			m.Reply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reply |= (CommandExecutionReply(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xeb, 0xa6, 0xdd, 0xd4, 0x27, 0x54, 0x32, 0x8f, 0x4d, 0x95, 0xa9, 0x3a, 0xab, 0xa7,
	0x0a, 0x89, 0x06, 0x0d, 0x6e, 0x9c, 0xd8, 0x54, 0x50, 0x45, 0xd5, 0x49, 0x0e, 0x27, 0x6e, 0x6e,
	0x66, 0x8c, 0x45, 0x12, 0x87, 0xc4, 0xd1, 0xe0, 0x1b, 0xa0, 0x7c, 0x87, 0x9c, 0xf8, 0x18, 0x7c,
	0x81, 0x1d, 0x39, 0x73, 0x98, 0x50, 0x3f, 0x09, 0x8a, 0x5d, 0x50, 0x83, 0x76, 0xca, 0x7b, 0xef,
	0xff, 0x7b, 0x2f, 0xf6, 0xff, 0x19, 0x06, 0x3c, 0x53, 0xf3, 0x2c, 0xd7, 0x46, 0x63, 0x8f, 0x67,
	0x8a, 0x3c, 0x95, 0xca, 0x7c, 0x2c, 0x37, 0xf3, 0x48, 0x27, 0x81, 0xd4, 0x52, 0x07, 0x56, 0xdb,
	0x94, 0x1f, 0x6c, 0x66, 0x13, 0x1b, 0xb9, 0x1e, 0x32, 0x96, 0x5a, 0xcb, 0x58, 0x04, 0x3c, 0x53,
	0x01, 0x4f, 0x53, 0x6d, 0xb8, 0x51, 0x3a, 0x2d, 0x9c, 0x3a, 0x7d, 0x0d, 0xc3, 0xc5, 0x17, 0x11,
	0x95, 0x46, 0x30, 0xf1, 0xb9, 0x14, 0x85, 0xc1, 0x2f, 0xe0, 0x30, 0xd2, 0x49, 0xc2, 0xd3, 0xeb,
	0x11, 0xa2, 0x68, 0xf6, 0xe0, 0x82, 0xdc, 0xde, 0x9d, 0x75, 0x7e, 0xdd, 0x9d, 0xe1, 0x58, 0x4b,
	0x5e, 0x5e, 0x2b, 0x23, 0xf2, 0x20, 0xe7, 0x37, 0x73, 0xc6, 0x6f, 0xd8, 0x5f, 0x74, 0x6a, 0xe0,
	0x74, 0x37, 0xe7, 0xd2, 0x55, 0x98, 0x28, 0x32, 0x9d, 0x16, 0x02, 0x3f, 0x83, 0x7e, 0x2e, 0xb2,
	0xf8, 0xab, 0x9d, 0x36, 0x3c, 0x27, 0xf3, 0xe6, 0x3a, 0x3b, 0xc8, 0xb5, 0x28, 0x9d, 0xb2, 0x86,
	0x60, 0x0e, 0xc4, 0x18, 0x7a, 0xca, 0x88, 0x64, 0xd4, 0xa5, 0x68, 0x36, 0x60, 0x36, 0xc6, 0x8f,
	0xa0, 0xdf, 0x7c, 0x8b, 0x91, 0x47, 0xbd, 0xd9, 0x80, 0xb9, 0xe4, 0xc9, 0x0f, 0x04, 0x27, 0xf7,
	0x8e, 0xc2, 0x63, 0xf0, 0xd6, 0xcb, 0x95, 0xdf, 0x21, 0xc7, 0x55, 0x4d, 0x1f, 0xae, 0x55, 0xfc,
	0xef, 0x58, 0x8d, 0x4a, 0xa0, 0x7b, 0xf5, 0xd6, 0x47, 0x04, 0x57, 0x35, 0x1d, 0x5e, 0x7d, 0x6a,
	0x69, 0x53, 0x38, 0x08, 0xdf, 0xb1, 0xe5, 0xfa, 0x8d, 0xdf, 0x25, 0xa7, 0x55, 0x4d, 0x71, 0x68,
	0x72, 0x95, 0xca, 0x16, 0x43, 0xa1, 0x1f, 0xae, 0x96, 0x97, 0x0b, 0xdf, 0x23, 0x27, 0x55, 0x4d,
	0x8f, 0xc2, 0x58, 0x45, 0xa2, 0x45, 0x8c, 0xc1, 0x5b, 0x30, 0xe6, 0xf7, 0xdc, 0xff, 0x17, 0x79,
	0xbe, 0xaf, 0x92, 0xde, 0xb7, 0xef, 0x93, 0xce, 0xf9, 0x12, 0x60, 0xa5, 0xe5, 0x2b, 0x67, 0x29,
	0x7e, 0x09, 0x87, 0x3b, 0x07, 0xf1, 0xb1, 0xf5, 0xa8, 0xbd, 0x17, 0xf2, 0x78, 0xbf, 0xf8, 0x9f,
	0xc9, 0x17, 0x47, 0xb7, 0xdb, 0x09, 0xfa, 0xb9, 0x9d, 0xa0, 0xdf, 0xdb, 0x09, 0x7a, 0xdf, 0x3c,
	0x93, 0xcd, 0x81, 0x5d, 0xf0, 0xf3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x64, 0xe6, 0x22, 0xdc,
	0x3f, 0x02, 0x00, 0x00,
}
